{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-09-02T21:05:53.727330Z", "invocation_id": "c6388770-8dc6-446c-bfca-f2a99ade26d4", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-02T21:04:55.756988Z", "completed_at": "2025-09-02T21:04:55.864707Z"}, {"name": "execute", "started_at": "2025-09-02T21:04:55.866154Z", "completed_at": "2025-09-02T21:05:18.835449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 23.08142066001892, "adapter_response": {"_message": "CREATE TABLE (68.0k rows, 42.0 MiB processed)", "code": "CREATE TABLE", "rows_affected": 68027, "bytes_processed": 44043012, "bytes_billed": 45088768, "location": "US", "project_id": "rj-smas-dev", "job_id": "d6df3426-0348-401d-9e9f-e07ed8a07dc6", "slot_ms": 986721}, "message": "CREATE TABLE (68.0k rows, 42.0 MiB processed)", "failures": null, "unique_id": "model.queries.gestao_vagas", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__gestao_vagas_repeat as (\n\n\nSELECT * FROM `rj-smas-dev`.`arcgis_raw`.`gestao_vagas_repeat_raw`\n), clusters AS (\n    -- 1) padroniza nomes -----------------------------------------------------\nWITH base_padronizada AS (\n    WITH src AS (\n    SELECT * FROM `rj-smas-dev`.`arcgis_raw`.`gestao_vagas_repeat_raw`\n),\n\ntokens AS (\n    SELECT\n        globalid, parentrowid,\n        \n        SPLIT(\n    TRIM(                                                         \n      REGEXP_REPLACE(\n        REGEXP_REPLACE(\n          LOWER(\n            REGEXP_REPLACE(NORMALIZE(src.repeat_nome_usuario, NFD), r'\\p{M}', '')  -- remove acentos\n          ),\n          r'[^a-z\\s]', ' '        -- pontua\u00e7\u00e3o \u2192 espa\u00e7o\n        ),\n        r'\\s+', ' '               -- espa\u00e7os duplicados\n      )\n    )\n, ' ') AS arr_usuario,\n        SPLIT(\n    TRIM(                                                         \n      REGEXP_REPLACE(\n        REGEXP_REPLACE(\n          LOWER(\n            REGEXP_REPLACE(NORMALIZE(src.repeat_nome_mae, NFD), r'\\p{M}', '')  -- remove acentos\n          ),\n          r'[^a-z\\s]', ' '        -- pontua\u00e7\u00e3o \u2192 espa\u00e7o\n        ),\n        r'\\s+', ' '               -- espa\u00e7os duplicados\n      )\n    )\n,     ' ') AS arr_mae\n    FROM src\n),\n\nfiltered AS (\n    SELECT\n        *,\n        ARRAY(\n          SELECT w FROM UNNEST(arr_usuario) w\n          WHERE w NOT IN UNNEST(ARRAY<STRING>['de', 'da', 'do', 'das', 'dos', 'e', 'a', 'o', 'os', 'as'])\n        ) AS arr_usuario_ok,\n        ARRAY(\n          SELECT w FROM UNNEST(arr_mae) w\n          WHERE w NOT IN UNNEST(ARRAY<STRING>['de', 'da', 'do', 'das', 'dos', 'e', 'a', 'o', 'os', 'as'])\n        ) AS arr_mae_ok\n    FROM tokens\n)\n\nSELECT\n    globalid, parentrowid,\n    \n    ARRAY_TO_STRING(arr_usuario_ok, ' ') AS nome_usuario_norm,\n    ARRAY_TO_STRING(arr_mae_ok,     ' ') AS nome_mae_norm\nFROM filtered\n),\n\n-- 1. Base com nomes normalizados\nbase AS (\n    SELECT\n        globalid   AS globalid,\n        parentrowid AS id_principal,\n        nome_usuario_norm,\n        nome_mae_norm\n    FROM base_padronizada\n),\n\n-- 2. Bloqueio A  (SOUNDEX do nome)  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nblk_a AS (\n    SELECT\n        *,\n        SOUNDEX(nome_usuario_norm) AS blk\n    FROM base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY blk ORDER BY id_principal) <= 2000\n),\n\npairs_a AS (\n    SELECT\n        a.id_principal AS id_a,\n        b.id_principal AS id_b,\n        a.nome_usuario_norm, a.nome_mae_norm,\n        b.nome_usuario_norm AS nome_usuario_norm_b, b.nome_mae_norm AS nome_mae_norm_b\n    FROM blk_a a\n    JOIN blk_a b USING (blk)\n    WHERE a.id_principal < b.id_principal\n),\n\n-- 3. Bloqueio B  (SOUNDEX do nome + \u00faltimo sobrenome da m\u00e3e) \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nblk_b AS (\n    SELECT\n        *,\n        CONCAT(\n          SOUNDEX(nome_usuario_norm), '_',\n          SOUNDEX(SPLIT(nome_mae_norm, ' ')[SAFE_OFFSET(-1)])  -- \u00faltimo token\n        ) AS blk\n    FROM base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY blk ORDER BY id_principal) <= 2000\n),\n\npairs_b AS (\n    SELECT\n        a.id_principal AS id_a,\n        b.id_principal AS id_b,\n        a.nome_usuario_norm, a.nome_mae_norm,\n        b.nome_usuario_norm AS nome_usuario_norm_b, b.nome_mae_norm AS nome_mae_norm_b\n    FROM blk_b a\n    JOIN blk_b b USING (blk)\n    WHERE a.id_principal < b.id_principal\n),\n\n-- 4. Uni\u00e3o dos pares candidatos \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\npairs AS (\n    SELECT * FROM pairs_a\n    UNION ALL\n    SELECT * FROM pairs_b\n),\n\n-- 5. M\u00e9tricas de dist\u00e2ncia e conten\u00e7\u00e3o \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nscored AS (\n    SELECT\n        id_a, id_b,\n        EDIT_DISTANCE(nome_usuario_norm,  nome_usuario_norm_b) AS d_nome_usuario_norm,\n        EDIT_DISTANCE(nome_mae_norm,  nome_mae_norm_b) AS d_nome_mae_norm,\n\n        ARRAY_LENGTH(\n          ARRAY(\n            SELECT x FROM UNNEST(SPLIT(nome_usuario_norm, ' ')) x\n            INTERSECT DISTINCT\n            SELECT y FROM UNNEST(SPLIT(nome_usuario_norm_b,' ')) y\n          )\n        ) / LEAST(\n              ARRAY_LENGTH(SPLIT(nome_usuario_norm,  ' ')),\n              ARRAY_LENGTH(SPLIT(nome_usuario_norm_b,' '))\n          )                                   AS cont_nome_usuario_norm,\n\n        ARRAY_LENGTH(\n          ARRAY(\n            SELECT x FROM UNNEST(SPLIT(nome_mae_norm, ' ')) x\n            INTERSECT DISTINCT\n            SELECT y FROM UNNEST(SPLIT(nome_mae_norm_b,' ')) y\n          )\n        ) / LEAST(\n              ARRAY_LENGTH(SPLIT(nome_mae_norm,  ' ')),\n              ARRAY_LENGTH(SPLIT(nome_mae_norm_b,' '))\n          )                                   AS cont_nome_mae_norm\n    FROM pairs\n),\n\n-- 6. Pares que satisfazem a regra de duplicidade \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ndupes AS (\n    SELECT id_a, id_b\n    FROM scored\n    WHERE (d_nome_usuario_norm <= 2 OR cont_nome_usuario_norm >= 0.8)\n      AND (d_nome_mae_norm <= 2 OR cont_nome_mae_norm >= 0.8)\n),\n\n-- 7) Grafo n\u00e3o-direcionado (componentes conexas) ----------------------------------------------------\ngraph AS (\n    SELECT id_principal AS node, id_principal AS neigh FROM base\n    UNION ALL\n    SELECT id_a, id_b FROM dupes\n    UNION ALL\n    SELECT id_b, id_a FROM dupes\n),\n\nseed AS (\n    SELECT node AS id_principal, MIN(neigh) AS cluster_seed\n    FROM graph\n    GROUP BY node\n),\n\n-- 8. Resultado final (uma linha por id_principal) \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nfinal AS (\n    SELECT\n        b.globalid,\n        b.id_principal,\n        b.nome_usuario_norm,\n        b.nome_mae_norm,\n        MIN(cluster_seed) OVER (PARTITION BY cluster_seed) AS cluster_id,\n        COUNT(*)        OVER (PARTITION BY cluster_seed)   AS cluster_size\n    FROM base b\n    JOIN seed USING (id_principal)\n)\n\nSELECT\n    globalid,\n    id_principal,\n    nome_usuario_norm,\n    nome_mae_norm,\n    cluster_id,\n    cluster_size,\n    cluster_size > 1 AS is_duplicado\nFROM final\n)\n\nSELECT\n    r.*,\n    c.nome_usuario_norm,\n    c.nome_mae_norm,\n    c.cluster_id,\n    c.cluster_size,\n    c.is_duplicado\nFROM __dbt__cte__gestao_vagas_repeat  r\nLEFT JOIN clusters c\n  ON r.globalid = c.globalid", "relation_name": "`rj-smas-dev`.`dashboard_arcgis_dev`.`gestao_vagas`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-02T21:04:55.882534Z", "completed_at": "2025-09-02T21:04:55.938536Z"}, {"name": "execute", "started_at": "2025-09-02T21:04:55.939379Z", "completed_at": "2025-09-02T21:05:53.668185Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 57.805707693099976, "adapter_response": {"_message": "CREATE TABLE (300.2k rows, 355.5 MiB processed)", "code": "CREATE TABLE", "rows_affected": 300183, "bytes_processed": 372748678, "bytes_billed": 373293056, "location": "US", "project_id": "rj-smas-dev", "job_id": "c26aedd7-17ac-42cf-bda2-ca32c035b288", "slot_ms": 5745589}, "message": "CREATE TABLE (300.2k rows, 355.5 MiB processed)", "failures": null, "unique_id": "model.queries.abordagem", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__abordagem_repeat as (\n\n\nSELECT\n  objectid,\n  globalid,\n  CASE\n   WHEN repeat_unidade_calculo = 'CREAS MARIA LINA DE CASTRO LIMA' THEN 'Creas Maria Lina De Castro Lima'\n   WHEN repeat_unidade_calculo = 'CREAS SIMONE DE BEAUVOIR' THEN 'Creas Simone De Beauvoir'\n   WHEN repeat_unidade_calculo = 'CREAS ARLINDO RODRIGUES' THEN 'Creas Arlindo Rodrigues'\n   WHEN repeat_unidade_calculo = 'CREAS JANETE CLAIR' THEN 'Creas Janete Clair'\n   WHEN repeat_unidade_calculo = 'CREAS PROFESSORA ALDAIZA SPOSATI' THEN 'Creas Professora Aldaiza Sposati'\n   WHEN repeat_unidade_calculo = 'CREAS PROFESSORA M\u00c1RCIA LOPES' THEN 'Creas Professora Marcia Lopes'\n   WHEN repeat_unidade_calculo = 'CREAS STELLA MARIS' THEN 'Creas Stella Maris'\n   WHEN repeat_unidade_calculo = 'CREAS NELSON CARNEIRO' THEN 'Creas Nelson Carneiro'\n   WHEN repeat_unidade_calculo = 'CREAS WANDA ENGEL ADUAN' THEN 'Creas Wanda Engel Aduan'\n   WHEN repeat_unidade_calculo = 'CREAS JO\u00c3O H\u00c9LIO FERNANDES VIEITES' THEN 'Creas Joao Helio Fernandes Vieites'\n   WHEN repeat_unidade_calculo = 'CREAS DANIELA PEREZ' THEN 'Creas Daniela Perez'\n   WHEN repeat_unidade_calculo = 'CREAS PADRE GUILHERME DECAMINADA' THEN 'Creas Padre Guilherme Decaminada'\n   WHEN repeat_unidade_calculo = 'CREAS ZILDA ARNS NEUMANN' THEN 'Creas Zilda Arns Neumann'\n   WHEN repeat_unidade_calculo = 'CREAS JO\u00c3O MANUEL MONTEIRO' THEN 'Creas Joao Manuel Monteiro'\n    WHEN repeat_unidade_calculo = 'CENTRO POP JOS\u00c9 SARAMAGO' THEN 'Centro Pop Jos\u00e9 Saramago'\n   WHEN repeat_unidade_calculo = 'CENTRO POP B\u00c1RBARA CALAZANS' THEN 'Centro Pop Barbara  Calazans'\n   ELSE repeat_unidade_calculo\n   END AS repeat_unidade_calculo_tratada,\n  repeat_unidade_cas,\n  repeat_nome_usuario,\n  repeat_cpf,\n\n  SAFE.PARSE_DATE('%d/%m/%Y', repeat_data_nascimento) AS repeat_data_nascimento,\n  repeat_data_nascimento_iso,\n  repeat_grupo_familiar,\n\n  repeat_idade,\n  repeat_faixa_etaria,\n  CASE\n   WHEN repeat_estado_nascimento = 'rio_de_janeiro' THEN 'Rio de Janeiro'\n   WHEN repeat_estado_nascimento = 'outros_estados' THEN 'Outros Estados'\n   WHEN repeat_estado_nascimento = 'outro_pais' THEN 'Outro Pa\u00eds'\n   WHEN repeat_estado_nascimento = 'ns_nr' THEN 'NS/NR'\n   ELSE repeat_estado_nascimento\n   END AS repeat_estado_nascimento_tratada,\n  repeat_nome_mae,\n  repeat_nome_pai,\n  CASE \n   WHEN repeat_raca_cor_etnia = 'parda' THEN 'Parda'\n   WHEN repeat_raca_cor_etnia = 'branca' THEN 'Branca'\n   WHEN repeat_raca_cor_etnia = 'preta' THEN 'Preta'\n   WHEN repeat_raca_cor_etnia = 'amarela' THEN 'Amarela'\n   WHEN repeat_raca_cor_etnia = 'ind\u00edgena' THEN 'Ind\u00edgena'\n   WHEN repeat_raca_cor_etnia = 'nao_sabe_nao_quis_responder' THEN 'NS/NR'\n   ELSE repeat_raca_cor_etnia\n   END AS repeat_raca_cor_etnia_tratada,\n  CASE\n   WHEN repeat_sexo = 'masculino' THEN 'Masculino'\n   WHEN repeat_sexo = 'feminino' THEN 'Feminino'\n   WHEN repeat_sexo = 'intersexo' THEN 'Intersexo'\n   WHEN repeat_sexo = 'nao_sabe_nao_quis_responder' THEN 'NS/NR'\n   ELSE repeat_sexo\n   END AS repeat_sexo,\n  turno_abordagem,\n\n  DATE(data_abordagem) AS data_abordagem,\n  ano_num_data_abordagem,\n  dia_num_data_abordagem,\n  CASE\n  WHEN RIGHT(mes_abrev_data_abordagem, 1) = '.' THEN mes_abrev_data_abordagem\n  ELSE CONCAT(mes_abrev_data_abordagem, '.')\n  END AS mes_abrev_data_abordagem,\n\n  ano_mes_data_abordagem,\n  bairro_abord,\n\n  CONCAT(y, ', ', x) AS coordenadas,\n\n  CASE\n   WHEN note_creas = 'CREAS Janete Clair' THEN 'Creas Janete Clair'\n   WHEN note_creas = 'CREAS Maria Lina de Castro Lima' THEN 'Creas Maria Lina De Castro Lima'\n   WHEN note_creas = 'CREAS Daniela Perez' THEN 'Creas Daniela Perez'\n   WHEN note_creas = 'CREAS Stella Maris' THEN 'Creas Stella Maris'\n   WHEN note_creas = 'CREAS N\u00e9lson Carneiro' THEN 'Creas Nelson Carneiro'\n   WHEN note_creas = 'CREAS Padre Guilherme Decaminada' THEN 'Creas Padre Guilherme Decaminada'\n   WHEN note_creas = 'CREAS Professora M\u00e1rcia Lopes' THEN 'Creas Professora M\u00e1rcia Lopes'\n   WHEN note_creas = 'CREAS Professora Alda\u00edza Sposati' THEN 'Creas Professora Alda\u00edza Sposati'\n   WHEN note_creas = 'CREAS Jo\u00e3o H\u00e9lio Fernandes Vieites' THEN 'Creas Jo\u00e3o H\u00e9lio Fernandes Vieites'\n   WHEN note_creas = 'CREAS Wanda Engel Aduan' THEN 'Creas Wanda Engel Aduan'\n   WHEN note_creas = 'CREAS Zilda Arns Neumann' THEN 'Creas Zilda Arns Neumann'\n   WHEN note_creas = 'CREAS Nelson Carneiro' THEN 'Creas Nelson Carneiro'\n   WHEN note_creas = 'CREAS Jo\u00e3o Manoel Monteiro' THEN 'Creas Jo\u00e3o Manoel Monteiro'\n   WHEN note_creas = 'CREAS Simone de Beauvoir' THEN 'Creas Simone de Beauvoir'\n   WHEN note_creas = 'CREAS Arlindo Rodrigues' THEN 'Creas Arlindo Rodrigues'\n   ELSE note_creas\n   END AS note_creas_tratada,\n  CASE\n   WHEN resp_abordagem = 'cgppsr' THEN 'CTPR'\n   WHEN resp_abordagem = 'creas' THEN 'CREAS'\n   WHEN resp_abordagem = 'centro_pop' THEN 'CENTRO POP'\n   ELSE resp_abordagem\n   END AS resp_abordagem,\n  CASE resp_abordagem1\n   WHEN 'ouvidoria1' THEN 'Ouvidoria CTPR'\n   WHEN'ouvidoria2' THEN 'Ouvidoria CREAS'\n   WHEN'ouvidoria3' THEN 'Ouvidoria Centro POP'\n   WHEN'tenda_acol_direitos' THEN 'Tenda acolhe com direitos'\n   WHEN'abord_itinerante' THEN 'Abordagem CTPR'\n   WHEN'deman_emergencial1' THEN 'Demanda emergencial CTPR'\n   WHEN'naas' THEN 'NAAS'\n   WHEN'itinerante' THEN 'Abordagem CREAS'\n   WHEN'deman_emergencial2' THEN 'Demanda emergencial CREAS'\n   WHEN'abordagem_social' THEN 'Abordagem Centro POP'\n   WHEN'demanda_emergencial' THEN 'Demanda emergencial Centro POP'\n   WHEN'ncp' THEN 'NCP'\n   ELSE resp_abordagem1\n   END AS resp_abordagem1,\n  acao_conjunta,\n  CASE\n   WHEN permanencia_rua = 'h24' THEN '24 horas'\n   WHEN permanencia_rua = 'apenas_durante_dia' THEN 'Apenas durante o dia'\n   WHEN permanencia_rua = 'durante_semana_retorna_casa_final_de_semana' THEN 'Durante a semana'\n   WHEN permanencia_rua = 'frequenta_cenas_de_uso_esporadicamente' THEN 'Frequenta cenas de uso'\n   WHEN permanencia_rua = 'apenas_durante_noite' THEN 'Apenas durante a noite'\n   WHEN permanencia_rua = 'nao_sabe_nao_respondeu' THEN 'NS/NR'\n   ELSE permanencia_rua\n   END AS permanencia_rua_tratada,\n  CASE\n   WHEN tempo_permanencia = 'de_1_a_3_anos' THEN 'De 1 a 3 anos'\n   WHEN tempo_permanencia = 'de_3_a_6_anos' THEN 'De 3 a 6 anos'\n   WHEN tempo_permanencia = 'de_1_a_3_meses' THEN 'De 1 a 3 meses'\n   WHEN tempo_permanencia = 'menos_3_dias' THEN 'Menos de 3 dias'\n   WHEN tempo_permanencia = 'de_6_meses_a_1_ano' THEN 'De 6 meses a 1 ano'\n   WHEN tempo_permanencia = 'de_6_a_10_anos' THEN 'De 6 a 10 anos'\n   WHEN tempo_permanencia = 'de_3_a_6_meses' THEN 'De 3 a 6 meses'\n   WHEN tempo_permanencia = 'mais_de_10_anos' THEN 'Mais de 10 anos'\n   WHEN tempo_permanencia = 'de_7_a_30_dias' THEN 'De 7 a 30 anos'\n   WHEN tempo_permanencia = 'de_3_a_7_dias' THEN 'De 3 a 7 dias'\n   WHEN tempo_permanencia = 'ns_nr' THEN 'NS/NR'\n   ELSE tempo_permanencia\n   END AS tempo_permanencia_tratada,\n  principal_motivo_permanencia,\n\n  flag_conflito_familiar,\n  flag_abandono_familiar,\n  flag_desocupacao,\n  flag_orfandade,\n  flag_acesso_a_renda,\n  flag_desemprego,\n  flag_desemprego_dos_pais,\n  flag_transtorno_psiquiatrico,\n  flag_uso_drogas_ilicitas,\n  flag_trabalho_infantil,\n  flag_exploracao_sexual,\n  flag_egresso_sistema_prisional,\n  flag_alcoolismo_motivo,\n  flag_violencia_conflito_comuni,\n  flag_preferencia_vontade_prop,\n  flag_egresso_mse,\n  flag_imigrante,\n  flag_migrante,\n  flag_refugiado,\n  flag_ns_nr_motivo,\n  e_migrante,\n  CASE\n   WHEN migrante_terra_natal = 'nao_sabe_nao_quis_responder' THEN 'NS/NR'\n   WHEN migrante_terra_natal = 'sim' THEN 'Sim'\n   WHEN migrante_terra_natal = 'nao' THEN 'N\u00e3o'\n   ELSE migrante_terra_natal\n   END AS migrante_terra_natal_tratada,\n  CASE\n   WHEN possui_referencia = 'nao_sabe_nao_quis_responder' THEN 'NS/NR'\n    WHEN possui_referencia = 'sim' THEN 'Sim'\n    WHEN possui_referencia = 'nao' THEN 'N\u00e3o'\n   ELSE possui_referencia\n   END AS possui_referencia_tratada,\n  possui_documento,\n  documentacao,\n\n  flg_documentacao_identidade,\n  flg_documentacao_cnh,\n  flg_documentacao_registro_nasc,\n  flg_documentacao_ctps,\n  flg_documentacao_cpf,\n  flg_documentacao_passaporte,\n  CASE\n   WHEN escolaridade = 'medio_incompleto' THEN 'M\u00e9dio incompleto'\n   WHEN escolaridade = 'fundamental_incompleto' THEN 'Fundamental incompleto'\n   WHEN escolaridade = 'medio_completo' THEN 'M\u00e9dio completo'\n   WHEN escolaridade = 'fundamental_completo' THEN 'Fundamental completo'\n   WHEN escolaridade = 'nao_alfabetizado' THEN 'N\u00e3o alfabetizado'\n   WHEN escolaridade = 'nao_sabe_nao_respondeu' THEN 'N\u00e3o sabe/N\u00e3o respondeu'\n   WHEN escolaridade = 'superior_completo' THEN 'Superior completo'\n   WHEN escolaridade = 'superior_incompleto' THEN 'Superior incompleto'\n   WHEN escolaridade = 'nao_escolarizado' THEN 'N\u00e3o escolarizado'\n   ELSE escolaridade\n   END AS escolaridade_tratada,\n  recebe_beneficio,\n  beneficios,\n\n  flag_bolsa_familia,\n  flag_bpc,\n  flag_seguro_desemprego,\n  flag_aposentadoria,\n  flag_pensionista,\n  flag_outros_ben,\n  beneficios_outros,\n  CASE\n   WHEN ocupacao = 'catador' THEN 'Catador'\n   WHEN ocupacao = 'pedinte' THEN 'Pedinte'\n   WHEN ocupacao = 'ambulante' THEN 'Ambulante'\n   WHEN ocupacao = 'bicos' THEN 'Bicos'\n   WHEN ocupacao = 'outros' THEN 'Outros'\n   WHEN ocupacao = 'impossibilitado_para_trabalho' THEN 'Impossibilitado'\n   WHEN ocupacao = 'prostituicao' THEN 'Prostitui\u00e7\u00e3o'\n   WHEN ocupacao = 'ns_nr' THEN 'NS/NR' \n   ELSE ocupacao\n   END AS ocupacao_tratada,\n\n  flag_nao_tem_interesse,\n  flag_gastronomia,\n  flag_beleza,\n  flag_pequenos_reparos,\n  flag_jardinagem,\n  flag_empreendedorismo,\n  flag_producao_artesanal,\n  flag_inclusao_digital,\n  flag_outros_curso,\n  flag_curso_ns_nr,\n  flag_nao_tem,\n\n  flag_alcoolismo,\n  flag_asma_bronquite,\n  flag_covid_19,\n  flag_cancer_tumores,\n  flag_diabetes,\n  flag_dengue,\n  flag_depen_quimica,\n  flag_epilepsia,\n  flag_escabiose,\n  flag_hanseniase,\n  flag_hepatite,\n  flag_hipertensao_doenca_cardio,\n  flag_hiv_aids,\n  flag_pneumonia,\n  flag_sarampo,\n  flag_sifilis,\n  flag_transtorno_mental,\n  flag_trauma_fisico,\n  flag_tuberculose,\n  flag_ns_nr,\n\n  CASE\n   WHEN aceita_acolhimento IS NULL THEN 'nao'\n   WHEN TRIM(LOWER(aceita_acolhimento)) = 'n/a' THEN 'nao'\n   ELSE aceita_acolhimento\n   END AS aceita_acolhimento_tratada,\n  motivo_acolhimento_nao,\n  outro_motivo,\n\n  flag_motivo_renda,\n  flag_motivo_regra,\n  flag_motivo_moradia,\n  flag_motivo_animal,\n  flag_motivo_n_interesse,\n  flag_motivo_outro,\n  CASE\n   WHEN unidade_destino = 'albergue' THEN 'Albergue'\n   WHEN unidade_destino = 'central_recepcao' THEN 'Central de Recep\u00e7\u00e3o'\n   WHEN unidade_destino = 'outros' THEN 'Outros'\n   WHEN unidade_destino = 'com_terapeutica' THEN 'Comunidade Terap\u00eautica'\n   WHEN unidade_destino = 'urs' THEN 'URS'\n   ELSE unidade_destino\n   END AS unidade_destino_tratada,\n  CASE equipamento_destino\n    WHEN 'albergue_dercy_gon\u00e7alves' THEN 'Albergue Dercy Gon\u00e7alves'\n    WHEN 'albergue_nise_da_silveira' THEN 'Albergue Nise da Silveira'\n    WHEN 'craf_tom_jobim' THEN 'Craf Tom Jobim'\n    WHEN 'assoc_maranatha_rj_madureira' THEN 'Associa\u00e7\u00e3o Maranatha RJ Madureira'\n    WHEN 'albergue_martin_luther_kingjr' THEN 'Albergue Martin Luther King Jr'\n    WHEN 'assoc_maranatha_rj_lins_de_vasconcelos' THEN 'Associa\u00e7\u00e3o Maranatha RJ Lins de Vasconcelos'\n    WHEN 'inst_social_marca_de_cristo' THEN 'Instituto Social Marca de Cristo'\n    WHEN 'urs_rio_acolhedor_paciencia' THEN 'Urs Rio Acolhedor Paci\u00eancia'\n    WHEN 'cri_pastor_carlos_portela' THEN 'Cri Pastor Carlos Portela'\n    WHEN 'urs_haroldo_costa' THEN 'Urs Haroldo Costa'\n    WHEN 'albergue_mais_tempo_lgbtqia' THEN 'Albergue Mais Tempo LGBTQIA'\n    WHEN 'assoc_maranatha_rj_padre_miguel' THEN 'Associa\u00e7\u00e3o Maranatha RJ Padre Miguel'\n    WHEN 'assoc_maranatha_rj_vila_kennedy' THEN 'Associa\u00e7\u00e3o Maranatha RJ Vila Kennedy'\n    WHEN 'albergue_betinho' THEN 'Albergue Betinho'\n    WHEN 'inst_revivendo_com_cristo' THEN 'Instituto Revivendo com Cristo'\n    WHEN 'crca_ademar_ferreira_de_oliveira' THEN 'CRCA Ademar Ferreira de Oliveira'\n    WHEN 'assoc_maranatha_rj_bangu' THEN 'Associa\u00e7\u00e3o Maranatha RJ Bangu'\n    WHEN 'crca_taiguara' THEN 'CRCA Taiguara'\n    WHEN 'assoc_maranatha_rj_sepetiba' THEN 'Associa\u00e7\u00e3o Maranatha RJ Sepetiba'\n    WHEN 'albergue_alfonso_lavalle' THEN 'Albergue Alfonso Lavalle'\n    WHEN 'assoc_maranatha_rj_vila_valqueire' THEN 'Associa\u00e7\u00e3o Maranatha RJ Vila Valqueire'\n    WHEN 'assoc_de_assistencia_social_videira' THEN 'Associa\u00e7\u00e3o de Assist\u00eancia Social Videira'\n    WHEN 'projeto_alcan\u00e7ando_vidas' THEN 'Projeto Alcan\u00e7ando Vidas'\n    WHEN 'camor' THEN 'CAMOR'\n    WHEN 'assoc_maranatha_rj_engenho_de_dentro' THEN 'Associa\u00e7\u00e3o Maranatha RJ Engenho de Dentro'\n    WHEN 'inst_social_manasses_campo_grande2' THEN 'Instituto Social Manass\u00e9s Campo Grande 2'\n    WHEN 'inst_social_manasses_campo_grande1' THEN 'Instituto Social Manass\u00e9s Campo Grande 1'\n    WHEN 'comt_valentes_de_davi_escola_de_profetas' THEN 'COMT Valentes de Davi Escola de Profetas'\n   ELSE equipamento_destino\n   END AS equipamento_destino_tratada,\n  CASE\n   WHEN encam_creas = 'creas_maria_lina_de_castro_lima' THEN 'Creas Maria Lina De Castro Lima'\n   WHEN encam_creas = 'creas_simone_de_beauvoir' THEN 'Creas Simone De Beauvoir'\n   WHEN encam_creas = 'creas_arlindo_rodrigues' THEN 'Creas Arlindo Rodrigues'\n   WHEN encam_creas = 'creas_janete_clair' THEN 'Creas Janete Clair'\n   WHEN encam_creas = 'creas_professora_aldaiza_sposati' THEN 'Creas Professora Aldaiza Sposati'\n   WHEN encam_creas = 'creas_professora_marcia_lopes' THEN 'Creas Professora Marcia Lopes'\n   WHEN encam_creas = 'creas_stella_maris' THEN 'Creas Stella Maris'\n   WHEN encam_creas = 'creas_nelson_carneiro' THEN 'Creas Nelson Carneiro'\n   WHEN encam_creas = 'creas_wanda_engel_aduan' THEN 'Creas Wanda Engel Aduan'\n   WHEN encam_creas = 'creas_joao_helio_fernandes_vieites' THEN 'Creas Joao Helio Fernandes Vieites'\n   WHEN encam_creas = 'creas_daniela_perez' THEN 'Creas Daniela Perez'\n   WHEN encam_creas = 'creas_padre_guilherme_decaminada' THEN 'Creas Padre Guilherme Decaminada'\n   WHEN encam_creas = 'creas_zilda_arns_neumann' THEN 'Creas Zilda Arns Neumann'\n   WHEN encam_creas = 'creas_joao_manuel_monteiro' THEN 'Creas Joao Manuel Monteiro'\n   ELSE encam_creas\n   END AS encam_creas_tratada,\n  CASE\n   WHEN encam_centropop = 'centro_pop_jose_saramago' THEN 'Centro Pop Jos\u00e9 Saramago'\n   WHEN encam_centropop = 'centro_pop_barbara_calazans' THEN 'Centro Pop Barbara  Calazans'\n   ELSE encam_centropop\n   END AS encam_centropop_tratada,\n  encam_cras,\n\n  encaminhamento_rede,\n  ARRAY_TO_STRING(\n    ARRAY(\n      SELECT\n\n        CASE\n          WHEN LOWER(TRIM(part)) = 'cras' THEN 'CRAS'\n          WHEN LOWER(TRIM(part)) = 'defensoria_publica' THEN 'Defensoria P\u00fablica'\n          WHEN LOWER(TRIM(part)) = 'fundacao_leaoxii' THEN 'Funda\u00e7\u00e3o Le\u00e3o XIII'\n          WHEN LOWER(TRIM(part)) = 'outros' THEN 'Outros'\n          WHEN LOWER(TRIM(part)) = 'creas' THEN 'CREAS'\n          WHEN LOWER(TRIM(part)) = 'conselho_tutelar' THEN 'Conselho Tutelar'\n          WHEN LOWER(TRIM(part)) = 'detran' THEN 'DETRAN'\n          WHEN LOWER(TRIM(part)) = 'receita_federal' THEN 'Receita Federal'\n          WHEN LOWER(TRIM(part)) = 'centro_pop' THEN 'Centro POP'\n          WHEN LOWER(TRIM(part)) = 'encaminhamento_de_saude' THEN 'Encaminhamento de Sa\u00fade'\n          WHEN LOWER(TRIM(part)) = 'cartorio' THEN 'Cart\u00f3rio'\n          WHEN LOWER(TRIM(part)) = 'delegacia' THEN 'Delegacia'\n          WHEN LOWER(TRIM(part)) = 'nao_houve_encaminhamento' THEN 'Sem encaminhamentos'\n          ELSE encaminhamento_rede\n        END\n      FROM UNNEST(SPLIT(encaminhamento_rede, ',')) AS part\n    ),\n    ', '\n  ) AS encaminhamento_rede_tratada,\n\n  flg_sem_encaminhamento,\n  flg_encam_creas,\n  flg_encam_centropop,\n  flg_encam_cras,\n  flg_encam_conselhotutelar,\n  flg_encam_encaminhamento_saude,\n  flg_encam_defensoria_publica,\n  flg_encam_detran,\n  flg_encam_cartorio,\n  flg_encam_fundacao_leaoxiii,\n  flg_encam_receita_federal,\n  flg_encam_delegacia,\n  flg_encam_outros,\n  parentrowid,\n  created_user\n\n FROM `rj-smas-dev`.`arcgis_raw`.`abordagem_repeat_raw`\n),  __dbt__cte__abordagem_repeat_padronizacao_nomes as (\n\n\nWITH base AS (\n  SELECT\n    globalid,\n    parentrowid,\n    repeat_nome_usuario,\n    repeat_nome_mae,\n    ano_num_data_abordagem\n  FROM `rj-smas-dev`.`arcgis_raw`.`abordagem_repeat_raw`\n),\n\ntokens AS (\n  SELECT\n    *,\n\n    -- explode em palavras j\u00e1 normalizadas\n    SPLIT(\n    TRIM(                                                         \n      REGEXP_REPLACE(\n        REGEXP_REPLACE(\n          LOWER(\n            REGEXP_REPLACE(NORMALIZE(repeat_nome_usuario, NFD), r'\\p{M}', '')  -- remove acentos\n          ),\n          r'[^a-z\\s]', ' '        -- pontua\u00e7\u00e3o \u2192 espa\u00e7o\n        ),\n        r'\\s+', ' '               -- espa\u00e7os duplicados\n      )\n    )\n, ' ')     AS arr_usuario,\n    SPLIT(\n    TRIM(                                                         \n      REGEXP_REPLACE(\n        REGEXP_REPLACE(\n          LOWER(\n            REGEXP_REPLACE(NORMALIZE(repeat_nome_mae, NFD), r'\\p{M}', '')  -- remove acentos\n          ),\n          r'[^a-z\\s]', ' '        -- pontua\u00e7\u00e3o \u2192 espa\u00e7o\n        ),\n        r'\\s+', ' '               -- espa\u00e7os duplicados\n      )\n    )\n,     ' ')     AS arr_mae\n  FROM base\n),\n\nfiltered AS (\n  SELECT\n    *,\n\n    -- remove stop-words simples\n    ARRAY(\n      SELECT t\n      FROM UNNEST(arr_usuario) t\n      WHERE t NOT IN ('de','da','do','das','dos','e','a','o','os','as')\n    ) AS arr_usuario_ok,\n\n    ARRAY(\n      SELECT t\n      FROM UNNEST(arr_mae) t\n      WHERE t NOT IN ('de','da','do','das','dos','e','a','o','os','as')\n    ) AS arr_mae_ok\n  FROM tokens\n)\n\nSELECT\n  globalid,\n  parentrowid,\n  repeat_nome_usuario,\n  repeat_nome_mae,\n  ano_num_data_abordagem,\n\n  ARRAY_TO_STRING(arr_usuario_ok, ' ')  AS nome_usuario_norm,\n  ARRAY_TO_STRING(arr_mae_ok,     ' ')  AS nome_mae_norm\nFROM filtered\n),  __dbt__cte__abordagem_repeat_tratamento_duplicatas_cluster as (\n\n\n-- 1. Base com nomes normalizados\nWITH base AS (\n    SELECT\n        globalid,\n        parentrowid,\n        nome_usuario_norm AS nm,\n        nome_mae_norm     AS mm,\n        ano_num_data_abordagem\n    FROM __dbt__cte__abordagem_repeat_padronizacao_nomes\n),\n\n-- 2. Bloqueio A  (SOUNDEX do nome)  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nblk_a AS (\n    SELECT\n        *,\n        SOUNDEX(nm) AS blk\n    FROM base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY blk ORDER BY parentrowid) <= 2000\n),\n\npairs_a AS (\n    SELECT\n        a.parentrowid AS id_a,\n        b.parentrowid AS id_b,\n        a.nm, a.mm,\n        b.nm AS nm_b, b.mm AS mm_b\n    FROM blk_a a\n    JOIN blk_a b USING (blk)\n    WHERE a.parentrowid < b.parentrowid\n),\n\n-- 3. Bloqueio B  (SOUNDEX do nome + \u00faltimo sobrenome da m\u00e3e) \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nblk_b AS (\n    SELECT\n        *,\n        CONCAT(\n          SOUNDEX(nm), '_',\n          SOUNDEX(SPLIT(mm, ' ')[SAFE_OFFSET(-1)])  -- \u00faltimo token\n        ) AS blk\n    FROM base\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY blk ORDER BY parentrowid) <= 2000\n),\n\npairs_b AS (\n    SELECT\n        a.parentrowid AS id_a,\n        b.parentrowid AS id_b,\n        a.nm, a.mm,\n        b.nm AS nm_b, b.mm AS mm_b\n    FROM blk_b a\n    JOIN blk_b b USING (blk)\n    WHERE a.parentrowid < b.parentrowid\n),\n\n-- 4. Uni\u00e3o dos pares candidatos \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\npairs AS (\n    SELECT * FROM pairs_a\n    UNION ALL\n    SELECT * FROM pairs_b\n),\n\n-- 5. M\u00e9tricas de dist\u00e2ncia e conten\u00e7\u00e3o \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nscored AS (\n    SELECT\n        id_a, id_b,\n        EDIT_DISTANCE(nm,  nm_b) AS d_nm,\n        EDIT_DISTANCE(mm,  mm_b) AS d_mm,\n\n        ARRAY_LENGTH(\n          ARRAY(\n            SELECT x FROM UNNEST(SPLIT(nm, ' ')) x\n            INTERSECT DISTINCT\n            SELECT y FROM UNNEST(SPLIT(nm_b,' ')) y\n          )\n        ) / LEAST(\n              ARRAY_LENGTH(SPLIT(nm,  ' ')),\n              ARRAY_LENGTH(SPLIT(nm_b,' '))\n          )                                   AS cont_nm,\n\n        ARRAY_LENGTH(\n          ARRAY(\n            SELECT x FROM UNNEST(SPLIT(mm, ' ')) x\n            INTERSECT DISTINCT\n            SELECT y FROM UNNEST(SPLIT(mm_b,' ')) y\n          )\n        ) / LEAST(\n              ARRAY_LENGTH(SPLIT(mm,  ' ')),\n              ARRAY_LENGTH(SPLIT(mm_b,' '))\n          )                                   AS cont_mm\n    FROM pairs\n),\n\n-- 6. Pares que satisfazem a regra de duplicidade \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ndupes AS (\n    SELECT id_a, id_b\n    FROM scored\n    WHERE (d_nm <= 2 OR cont_nm >= 0.8)\n      AND (d_mm <= 2 OR cont_mm >= 0.8)\n),\n\n-- 7. Grafo n\u00e3o-direcionado (componentes conexas) \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ngraph AS (\n    SELECT parentrowid, parentrowid AS neigh FROM base\n    UNION ALL\n    SELECT id_a, id_b FROM dupes\n    UNION ALL\n    SELECT id_b, id_a FROM dupes\n),\n\nseed AS (\n    SELECT\n        parentrowid,\n        MIN(neigh) AS cluster_seed          \n    FROM graph\n    GROUP BY parentrowid                   \n),\n\n-- 8. Resultado final (uma linha por parentrowid) \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nfinal AS (\n    SELECT\n        b.globalid,\n        b.parentrowid,\n        b.nm,\n        b.mm,\n        b.ano_num_data_abordagem,\n        MIN(cluster_seed) OVER (PARTITION BY cluster_seed) AS cluster_id,\n        COUNT(*)        OVER (PARTITION BY cluster_seed)   AS cluster_size\n    FROM base b\n    JOIN seed USING (parentrowid)\n)\n\nSELECT\n    globalid,\n    parentrowid,\n    nm,\n    mm,\n    ano_num_data_abordagem,\n    cluster_id,\n    cluster_size,\n    cluster_size > 1 AS is_duplicado\nFROM final\n) SELECT\n  r.*,\n  e.cas,\n  e.e_mail,\n  c.nm,\n  c.mm,\n  c.cluster_id,\n  c.cluster_size,\n  c.is_duplicado  \nFROM \n  __dbt__cte__abordagem_repeat as r\nLEFT JOIN \n  `rj-smas-dev.dashboard_arcgis.abordagem_filtro_emails` as e\nON\n  r.repeat_unidade_cas = e.cas\nLEFT JOIN  \n  __dbt__cte__abordagem_repeat_tratamento_duplicatas_cluster as c\nON\n  r.globalid = c.globalid", "relation_name": "`rj-smas-dev`.`dashboard_arcgis_dev`.`abordagem`", "batch_results": null}], "elapsed_time": 59.95217490196228, "args": {"strict_mode": false, "introspect": true, "write_json": true, "show_resource_report": false, "state_modified_compare_more_unrendered_values": false, "project_dir": "/root/pipelines/arcgis/pipelines/../queries", "defer": false, "indirect_selection": "eager", "skip_nodes_if_on_run_start_fails": false, "static_parser": true, "log_file_max_bytes": 10485760, "target": "dev", "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "empty": false, "exclude": [], "profiles_dir": "/root/pipelines/arcgis/queries", "quiet": false, "select": [], "send_anonymous_usage_stats": true, "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_vars": false, "log_level": "info", "cache_selected_only": false, "favor_state": false, "printer_width": 80, "log_format_file": "debug", "which": "run", "log_format": "default", "partial_parse": true, "populate_cache": true, "use_colors_file": true, "require_resource_names_without_spaces": false, "require_nested_cumulative_type_params": false, "source_freshness_run_project_hooks": false, "invocation_command": "dbt run --project-dir /root/pipelines/arcgis/pipelines/../queries", "vars": {}, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "require_yaml_configuration_for_mf_time_spines": false, "partial_parse_file_diff": true, "print": true, "use_colors": true, "log_path": "/root/pipelines/arcgis/pipelines/../queries/logs"}}