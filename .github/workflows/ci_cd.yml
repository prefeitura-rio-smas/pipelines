name: CI · Build · Push

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # instala Poetry de forma idempotente + cache ----------------------------
      - uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv            # venv local criada pelo Poetry
          key: >-
            ${{ runner.os }}-poetry-
            ${{ hashFiles('poetry.lock') }}

      # instala deps normais + as de dev (flake8/pytest) ------------------------
      - name: Install deps
        run: |
          poetry install --no-interaction --no-ansi

      - name: Lint
        continue-on-error: true           # remova quando o código estiver limpo
        run: poetry run flake8 pipeline

      - name: Tests
        continue-on-error: true           # até criar testes de verdade
        run: poetry run pytest


  smoke-dbt:                         # 2️⃣ compila o dbt
    needs: test
    runs-on: ubuntu-latest
    env:
      DBT_PROFILES_DIR: queries
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - name: Install dbt only
        run: pip install --quiet dbt-core dbt-bigquery

      - name: dbt compile
        run: |
          dbt parse --project-dir queries --profiles-dir queries --target ci

  build-push:                       # 3️⃣ publica imagem só se smoke OK
    needs: smoke-dbt
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/prefeitura-rio-smas/pipeline_arcgis:latest
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            com.centurylinklabs.watchtower.enable=true
